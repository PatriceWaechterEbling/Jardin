// <auto-generated />
using Jardin;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jardin.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230424134709_patate")]
    partial class patate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlimentJardins", b =>
                {
                    b.Property<int>("AlimentId")
                        .HasColumnType("int");

                    b.Property<int>("JardinsId")
                        .HasColumnType("int");

                    b.HasKey("AlimentId", "JardinsId");

                    b.HasIndex("JardinsId");

                    b.ToTable("AlimentJardins");
                });

            modelBuilder.Entity("Jardin.Models.Aliment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aliment");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Aliment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Jardin.Models.Jardins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Emplacement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Surface")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Jardins");
                });

            modelBuilder.Entity("Jardin.Models.Fruit", b =>
                {
                    b.HasBaseType("Jardin.Models.Aliment");

                    b.Property<string>("Sucre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Fruit");
                });

            modelBuilder.Entity("Jardin.Models.Legume", b =>
                {
                    b.HasBaseType("Jardin.Models.Aliment");

                    b.Property<string>("Vitamine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Legume");
                });

            modelBuilder.Entity("AlimentJardins", b =>
                {
                    b.HasOne("Jardin.Models.Aliment", null)
                        .WithMany()
                        .HasForeignKey("AlimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jardin.Models.Jardins", null)
                        .WithMany()
                        .HasForeignKey("JardinsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
